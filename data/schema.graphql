schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "challenge"
"""
type challenge implements Node {
  description: String!
  id: ID!
  name: name!
}

"""
aggregated selection of "challenge"
"""
type challenge_aggregate {
  aggregate: challenge_aggregate_fields
  nodes: [challenge!]!
}

"""
aggregate fields of "challenge"
"""
type challenge_aggregate_fields {
  count(columns: [challenge_select_column!], distinct: Boolean): Int
  max: challenge_max_fields
  min: challenge_min_fields
}

"""
order by aggregate values of table "challenge"
"""
input challenge_aggregate_order_by {
  count: order_by
  max: challenge_max_order_by
  min: challenge_min_order_by
}

"""
input type for inserting array relation for remote table "challenge"
"""
input challenge_arr_rel_insert_input {
  data: [challenge_insert_input!]!
  on_conflict: challenge_on_conflict
}

"""
Boolean expression to filter rows from the table "challenge". All fields are combined with a logical 'AND'.
"""
input challenge_bool_exp {
  _and: [challenge_bool_exp]
  _not: challenge_bool_exp
  _or: [challenge_bool_exp]
  description: String_comparison_exp
  name: name_comparison_exp
}

"""
unique or primary key constraints on table "challenge"
"""
enum challenge_constraint {
  """unique or primary key constraint"""
  challenge_pkey
}

"""
input type for inserting data into table "challenge"
"""
input challenge_insert_input {
  description: String
  name: name
}

"""aggregate max on columns"""
type challenge_max_fields {
  description: String
}

"""
order by max() on columns of table "challenge"
"""
input challenge_max_order_by {
  description: order_by
}

"""aggregate min on columns"""
type challenge_min_fields {
  description: String
}

"""
order by min() on columns of table "challenge"
"""
input challenge_min_order_by {
  description: order_by
}

"""
response of any mutation on the table "challenge"
"""
type challenge_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [challenge!]!
}

"""
input type for inserting object relation for remote table "challenge"
"""
input challenge_obj_rel_insert_input {
  data: challenge_insert_input!
  on_conflict: challenge_on_conflict
}

"""
on conflict condition type for table "challenge"
"""
input challenge_on_conflict {
  constraint: challenge_constraint!
  update_columns: [challenge_update_column!]!
  where: challenge_bool_exp
}

"""
ordering options when selecting data from "challenge"
"""
input challenge_order_by {
  description: order_by
  name: order_by
}

"""
primary key columns input for table: "challenge"
"""
input challenge_pk_columns_input {
  name: name!
}

"""
select columns of table "challenge"
"""
enum challenge_select_column {
  """column name"""
  description

  """column name"""
  name
}

"""
input type for updating data in table "challenge"
"""
input challenge_set_input {
  description: String
  name: name
}

"""
update columns of table "challenge"
"""
enum challenge_update_column {
  """column name"""
  description

  """column name"""
  name
}

"""
A Relay Connection object on "challenge"
"""
type challengeConnection {
  edges: [challengeEdge!]!
  pageInfo: PageInfo!
}

type challengeEdge {
  cursor: String!
  node: challenge!
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "challenge"
  """
  delete_challenge(
    """filter the rows which have to be deleted"""
    where: challenge_bool_exp!
  ): challenge_mutation_response

  """
  delete single row from the table: "challenge"
  """
  delete_challenge_by_pk(name: name!): challenge

  """
  insert data into the table: "challenge"
  """
  insert_challenge(
    """the rows to be inserted"""
    objects: [challenge_insert_input!]!

    """on conflict condition"""
    on_conflict: challenge_on_conflict
  ): challenge_mutation_response

  """
  insert a single row into the table: "challenge"
  """
  insert_challenge_one(
    """the row to be inserted"""
    object: challenge_insert_input!

    """on conflict condition"""
    on_conflict: challenge_on_conflict
  ): challenge

  """
  update data of the table: "challenge"
  """
  update_challenge(
    """sets the columns of the filtered rows to the given values"""
    _set: challenge_set_input

    """filter the rows which have to be updated"""
    where: challenge_bool_exp!
  ): challenge_mutation_response

  """
  update single row of the table: "challenge"
  """
  update_challenge_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: challenge_set_input
    pk_columns: challenge_pk_columns_input!
  ): challenge
}

scalar name

"""
expression to compare columns of type name. All fields are combined with logical 'AND'.
"""
input name_comparison_exp {
  _eq: name
  _gt: name
  _gte: name
  _in: [name!]
  _is_null: Boolean
  _lt: name
  _lte: name
  _neq: name
  _nin: [name!]
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""query root"""
type query_root {
  """
  fetch data from the table: "challenge"
  """
  challenge_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [challenge_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [challenge_order_by!]

    """filter the rows returned"""
    where: challenge_bool_exp
  ): challengeConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "challenge"
  """
  challenge_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [challenge_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [challenge_order_by!]

    """filter the rows returned"""
    where: challenge_bool_exp
  ): challengeConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node
}

